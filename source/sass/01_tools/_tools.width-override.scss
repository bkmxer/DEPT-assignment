//
//    Allows setting the width of components by an Nth amount of grid columns without using actual grid elements.
//
//    @param columns                { number }             - amount of columns to span
//    @param container-padding      { pixel value }        - option to pass other value than grid padding in case of an element that is positioned absolute and doesnt take grid padding into consideration
//
//
//    example usage:
//    --------------
//
//    .foo {
//      @include width-override(2)
//    }
//

$grid-max-width: map_get($grid-config, 'max-width');
$grid-column-count: map_get($grid-config, 'columns');
$grid-container-padding-small: #{strip-unit(map_get($grid-config, 'container-gutter-small') * 2)}px;
$grid-container-padding: #{strip-unit(map_get($grid-config, 'container-gutter') * 2)}px;

@mixin width-override($columns: '1', $container-padding: null) {
  @if ($container-padding) {
    $container-padding: $container-padding;
  } @else {
    $container-padding: $grid-container-padding-small;
  }

  width: calc((100vw - #{strip-unit($container-padding)}px) / #{$grid-column-count / $columns});

  @include screen-tablet-portrait-and-bigger {
    @if ($container-padding) {
      $container-padding: $container-padding;
    } @else {
      $container-padding: $grid-container-padding;
    }

    width: calc((100vw - #{strip-unit($container-padding)}px) / #{$grid-column-count / $columns});
  }

  @include screen-desktop-and-bigger {
    @if ($container-padding) {
      $container-padding: $container-padding;
    } @else {
      $container-padding: $grid-container-padding;
    }

    width: calc(
      (100vw - (100vw - (#{$grid-max-width} - #{strip-unit($container-padding)}px))) / #{$grid-column-count /
        $columns}
    );
  }
}
